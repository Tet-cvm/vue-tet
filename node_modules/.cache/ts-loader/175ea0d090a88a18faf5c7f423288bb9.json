{"remainingRequest":"/Users/const/Documents/Vue/tet/node_modules/thread-loader/dist/cjs.js!/Users/const/Documents/Vue/tet/node_modules/babel-loader/lib/index.js!/Users/const/Documents/Vue/tet/node_modules/ts-loader/index.js??ref--13-3!/Users/const/Documents/Vue/tet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/const/Documents/Vue/tet/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/const/Documents/Vue/tet/src/components/Home.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/const/Documents/Vue/tet/src/components/Home.vue","mtime":1555638116261},{"path":"/Users/const/Documents/Vue/tet/node_modules/cache-loader/dist/cjs.js","mtime":1552975946601},{"path":"/Users/const/Documents/Vue/tet/node_modules/thread-loader/dist/cjs.js","mtime":1552975955420},{"path":"/Users/const/Documents/Vue/tet/node_modules/babel-loader/lib/index.js","mtime":1552975946378},{"path":"/Users/const/Documents/Vue/tet/node_modules/ts-loader/index.js","mtime":1552975955462},{"path":"/Users/const/Documents/Vue/tet/node_modules/cache-loader/dist/cjs.js","mtime":1552975946601},{"path":"/Users/const/Documents/Vue/tet/node_modules/vue-loader/lib/index.js","mtime":1552975955943}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\nimport axios from 'axios';\nimport { onTips } from '@/assets/js/common.js';\nimport * as echarts from 'echarts';\nimport Crumb from '@/components/Crumb.vue';\nexport default {\n  props: ['isNotice'],\n  name: 'Home',\n  components: {\n    Crumb: Crumb\n  },\n  data: function data() {\n    return {\n      installDialog: false,\n      lamp: ['Linux', 'Apache', 'MySQL', 'PHP'],\n      lnmp: ['Linux', 'Nginx', 'MySQL', 'PHP'],\n      domLoad: null,\n      domCpu: null,\n      domMemory: null,\n      domDisk: null,\n      nowLoadData: 18,\n      nowCpuData: 18,\n      nowMemoryData: 18,\n      nowDiskData: 18,\n      getLoadData: Number,\n      getCpuData: Number,\n      getMemoryData: Number,\n      getDiskData: Number,\n      dangerColor: '#09BB07',\n      cvmName: '',\n      circle: 5,\n      loading: false,\n      loadTxt: '重启服务器',\n      round: {\n        'load': 0,\n        'cpu': 0,\n        'memory': 0,\n        'disk': 0\n      }\n    };\n  },\n  created: function created() {\n    var that = this;\n    axios.post('/api/origin', {}, {}) // axios.get('/api/origin', {})\n    .then(function (res) {\n      if (res.data.status) {\n        var data = res.data.data;\n        var arr = data.split('\\n');\n        var environment;\n\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i].indexOf('environment') != -1) {\n            environment = arr[i];\n          }\n        }\n\n        that.installDialog = environment.indexOf('None') != -1;\n      } else {\n        onTips(that, 'error', res.data.info);\n      }\n    }).catch(function (err) {\n      onTips(that, 'error', '网络错误~');\n    });\n    that.axiosRound();\n    var Timer = setInterval(function () {\n      that.axiosRound();\n    }, 3600);\n    axios.post('/api/message', {}, {}).then(function (res) {\n      if (res.data.status) {\n        that.cvmName = res.data.data;\n      } else {\n        onTips(that, 'error', res.data.info);\n      }\n    }).catch(function (err) {\n      onTips(that, 'error', '网络错误~');\n    });\n    axios.post('/api/chart', {}, {}).then(function (res) {\n      console.log(res);\n\n      if (res.data.status) {\n        var categroy = echarts.init(document.getElementById('categroy'));\n        that.onCategroy(categroy, res.data.data.ltime, res.data.data.ntime, res.data.data.ldata, res.data.data.ndata);\n      } else {\n        onTips(that, 'error', res.data.info);\n      }\n    }).catch(function (err) {\n      onTips(that, 'error', '网络错误~');\n    });\n  },\n  watch: {\n    getLoadData: function getLoadData() {\n      this.onIncrease(this.domLoad, this.nowLoadData, this.getLoadData);\n    },\n    getCpuData: function getCpuData() {\n      this.onIncrease(this.domCpu, this.nowCpuData, this.getCpuData);\n    },\n    getMemoryData: function getMemoryData() {\n      this.onIncrease(this.domMemory, this.nowMemoryData, this.getMemoryData);\n    },\n    getDiskData: function getDiskData() {\n      this.onIncrease(this.domDisk, this.nowDiskData, this.getDiskData);\n    }\n  },\n  mounted: function mounted() {\n    this.$nextTick(function () {\n      this.domLoad = echarts.init(document.getElementById('tetLoad'));\n      this.domCpu = echarts.init(document.getElementById('tetCpu'));\n      this.domMemory = echarts.init(document.getElementById('tetMemory'));\n      this.domDisk = echarts.init(document.getElementById('tetDisk'));\n      this.onInitialize(this.domLoad, '负载均衡', this.nowLoadData);\n      this.onInitialize(this.domCpu, 'CPU使用率', this.nowCpuData);\n      this.onInitialize(this.domMemory, '内存使用率', this.nowMemoryData);\n      this.onInitialize(this.domDisk, '硬盘使用率', this.nowDiskData);\n    });\n  },\n  methods: {\n    onInstallLamp: function onInstallLamp() {\n      var that = this;\n      axios.post('/shell/lamp', {}, {}).then(function (res) {\n        if (res.data.status) {\n          console.log(res);\n        } else {\n          onTips(that, 'error', res.data.info);\n        }\n      }).catch(function (err) {\n        onTips(that, 'error', '网络错误~');\n      });\n    },\n    onInstallLnmp: function onInstallLnmp() {\n      var that = this;\n      axios.post('/shell/lnmp', {}, {}).then(function (res) {\n        if (res.data.status) {\n          that.installDialog = false;\n        } else {\n          onTips(that, 'error', res.data.info);\n        }\n      }).catch(function (err) {\n        onTips(that, 'error', '网络错误~');\n      });\n    },\n    axiosRound: function axiosRound() {\n      var that = this;\n      axios.post('/api/round', {}, {}).then(function (res) {\n        console.log(res.data);\n\n        if (res.data.status) {\n          var Data = res.data.data;\n          that.getLoadData = Data.load;\n          that.getCpuData = Data.cpu;\n          that.getMemoryData = Data.memory;\n          that.getDiskData = Data.disk;\n        } else {\n          onTips(that, 'error', res.data.info);\n        }\n      }).catch(function (err) {\n        onTips(that, 'error', '网络错误~');\n      });\n    },\n    //初始化数据\n    onInitialize: function onInitialize(myChart, Title, Data) {\n      var option = {\n        title: {\n          text: Title,\n          left: 'center',\n          bottom: 4,\n          textStyle: {\n            fontSize: 16,\n            fontWeight: 'normal',\n            color: '#666666'\n          }\n        },\n        tooltip: {\n          show: true,\n          confine: true,\n          trigger: 'item',\n          formatter: \"{a} <br/> 比例：( {d}% )\"\n        },\n        color: ['#b2b2b2', this.dangerColor],\n        calculable: false,\n        series: [{\n          name: Title,\n          type: 'pie',\n          radius: ['47%', '60%'],\n          hoverAnimation: false,\n          legendHoverLink: false,\n          avoidLabelOverlap: false,\n          label: {\n            normal: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              show: false\n            }\n          },\n          labelLine: {\n            normal: {\n              show: false\n            }\n          },\n          data: [{\n            value: (100 - Data).toFixed(1),\n            name: (100 - Data).toFixed(1) + '%'\n          }, {\n            value: Data.toFixed(1),\n            name: Data.toFixed(1) + '%',\n            label: {\n              show: true,\n              fontSize: '19',\n              fontWeight: 'bold'\n            }\n          }]\n        }]\n      };\n      myChart.setOption(option);\n    },\n    //数据动态增减\n    onIncrease: function onIncrease(myChart, nowData, getData) {\n      var that = this;\n\n      if (nowData != getData) {\n        var timer = setInterval(function () {\n          if (nowData < getData) {\n            nowData++;\n            that.onApply(myChart, nowData);\n\n            if (nowData >= getData) {\n              that.nowLoadData = that.getLoadData;\n              that.nowCpuData = that.getCpuData;\n              that.nowMemoryData = that.getMemoryData;\n              that.nowDiskData = that.getDiskData;\n              clearInterval(timer);\n            }\n          }\n\n          if (nowData > getData) {\n            nowData--;\n            that.onApply(myChart, nowData);\n\n            if (nowData <= getData) {\n              that.nowLoadData = that.getLoadData;\n              that.nowCpuData = that.getCpuData;\n              that.nowMemoryData = that.getMemoryData;\n              that.nowDiskData = that.getDiskData;\n              clearInterval(timer);\n            }\n          }\n        }, 45);\n      }\n    },\n    onApply: function onApply(myChart, Data) {\n      var that = this;\n      Data > 68 ? Data > 86 ? this.dangerColor = '#b44038' : this.dangerColor = '#c9856b' : this.dangerColor = '#09BB07';\n      myChart.setOption({\n        animation: false,\n        color: ['#b2b2b2', this.dangerColor],\n        series: [{\n          data: [{\n            value: (100 - Data).toFixed(1),\n            name: (100 - Data).toFixed(1) + '%'\n          }, {\n            value: Data.toFixed(1),\n            name: Data.toFixed(1) + '%',\n            label: {\n              show: true,\n              fontSize: '19',\n              fontWeight: 'bold'\n            }\n          }]\n        }]\n      });\n    },\n    reLoad: function reLoad() {\n      var that = this;\n\n      if (!that.loading) {\n        that.loading = true;\n        that.loadTxt = '重启中...';\n        axios.post('/api/restart', {}, {}).then(function (res) {\n          if (res.data.status) {\n            that.loading = false;\n            that.loadTxt = '重启服务器';\n          }\n\n          console.log(res);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n    },\n    onCategroy: function onCategroy(myChart, lastTime, nowTime, lastData, nowData) {\n      var option = {\n        color: ['#e64340', '#09BB07'],\n        tooltip: {\n          trigger: 'none',\n          axisPointer: {\n            type: 'cross'\n          }\n        },\n        legend: {\n          data: ['昨日流量', '今日流量']\n        },\n        grid: {\n          top: 70,\n          bottom: 42\n        },\n        xAxis: [{\n          type: 'category',\n          axisTick: {\n            alignWithLabel: true\n          },\n          axisLine: {\n            onZero: false,\n            lineStyle: {\n              color: '#333333'\n            }\n          },\n          axisPointer: {\n            label: {\n              formatter: function formatter(params) {\n                return '今日  ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n              }\n            }\n          },\n          data: nowTime\n        }, {\n          type: 'category',\n          axisTick: {\n            alignWithLabel: true\n          },\n          axisLine: {\n            onZero: false,\n            lineStyle: {\n              color: '#999999'\n            }\n          },\n          axisPointer: {\n            label: {\n              formatter: function formatter(params) {\n                return '昨日  ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n              }\n            }\n          },\n          data: lastTime\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: [{\n          name: '今日流量',\n          type: 'line',\n          xAxisIndex: 1,\n          smooth: true,\n          data: nowData\n        }, {\n          name: '昨日流量',\n          type: 'line',\n          smooth: true,\n          data: lastData\n        }]\n      };\n      myChart.setOption(option);\n    }\n  }\n};",null]}